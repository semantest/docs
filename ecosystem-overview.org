#+TITLE: TypeScript-EDA & Web-Buddy Ecosystem Overview
#+AUTHOR: Development Team
#+DATE: 2025-01-04
#+STARTUP: showall

* Executive Summary

The TypeScript-EDA and Web-Buddy ecosystem represents a revolutionary approach to web automation, combining event-driven architecture with intelligent pattern learning. This document provides a comprehensive overview of the multi-repository architecture and the relationships between all components.

* Architecture Overview

** Three-Layer Ecosystem Structure

The ecosystem is organized into three main layers:

1. **Foundation Layer**: TypeScript-EDA framework providing event-driven patterns
2. **Framework Layer**: Web-Buddy automation framework built on TypeScript-EDA
3. **Implementation Layer**: Specialized tools like ChatGPT-buddy built on Web-Buddy

#+BEGIN_SRC
┌─────────────────────────────────────────────────────────────┐
│                   Implementation Layer                      │
├─────────────────────────────────────────────────────────────┤
│  📱 ChatGPT-Buddy     │  🐙 GitHub-Buddy   │  📧 Gmail-Buddy │
│  AI Automation       │  Git Workflows     │  Email Mgmt     │
├─────────────────────────────────────────────────────────────┤
│                     Framework Layer                         │
├─────────────────────────────────────────────────────────────┤
│  🌐 Web-Buddy Server  │  🧩 Web-Buddy Extension             │
│  Event Coordination  │  Training System                     │
├─────────────────────────────────────────────────────────────┤
│                    Foundation Layer                         │
├─────────────────────────────────────────────────────────────┤
│  🏗️ EDA-Domain        │  🔧 EDA-Infrastructure              │
│  Events & Entities   │  Adapters & Ports                   │
│                      │  🎯 EDA-Application                  │
│                      │  Orchestration                       │
└─────────────────────────────────────────────────────────────┘
#+END_SRC

* Repository Structure

** Foundation Repositories

*** @typescript-eda/domain
- **Purpose**: Core domain patterns for event-driven architecture
- **Key Components**: Events, Entities, Value Objects, Repositories
- **Dependencies**: None (foundation)
- **Repository**: =https://github.com/rydnr/typescript-eda-domain=

*** @typescript-eda/infrastructure  
- **Purpose**: Infrastructure adapters and port implementations
- **Key Components**: Adapters, Decorators, Port patterns
- **Dependencies**: =@typescript-eda/domain=
- **Repository**: =https://github.com/rydnr/typescript-eda-infrastructure=

*** @typescript-eda/application
- **Purpose**: Application orchestration with @Enable decorators
- **Key Components**: Application class, @Enable decorator, Primary ports
- **Dependencies**: =@typescript-eda/domain=, =@typescript-eda/infrastructure=
- **Repository**: =https://github.com/rydnr/typescript-eda-application=

** Framework Repositories

*** @web-buddy/nodejs-server
- **Purpose**: Event-driven server for coordinating browser extension automation
- **Key Components**: HTTP server, WebSocket coordination, Extension management
- **Dependencies**: All =@typescript-eda/*= packages
- **Repository**: =https://github.com/rydnr/web-buddy-nodejs-server=

*** @web-buddy/browser-extension
- **Purpose**: Browser extension framework with intelligent training system
- **Key Components**: Background application, Training UI, Pattern learning
- **Dependencies**: All =@typescript-eda/*= packages
- **Repository**: =https://github.com/rydnr/web-buddy-browser-extension=

** Implementation Repositories

*** @chatgpt-buddy/server
- **Purpose**: AI-enhanced automation server for ChatGPT and language models
- **Key Components**: OpenAI integration, Anthropic API, Pattern recognition
- **Dependencies**: =@web-buddy/nodejs-server=, All =@typescript-eda/*= packages
- **Repository**: =https://github.com/rydnr/chatgpt-buddy= (server component)

*** @chatgpt-buddy/extension
- **Purpose**: AI automation browser extension built on Web-Buddy framework
- **Key Components**: ChatGPT-specific automation, AI pattern learning
- **Dependencies**: =@web-buddy/browser-extension=, All =@typescript-eda/*= packages
- **Repository**: =https://github.com/rydnr/chatgpt-buddy= (extension component)

*** @chatgpt-buddy/client
- **Purpose**: TypeScript/Python SDKs for ChatGPT automation
- **Key Components**: Event-driven client, Multi-model support, Type safety
- **Dependencies**: All =@typescript-eda/*= packages
- **Repository**: =https://github.com/rydnr/chatgpt-buddy= (client component)

* Dependency Flow

** Package Dependencies

#+BEGIN_SRC
┌─────────────────────────────────────────────────────────────┐
│                    Dependency Graph                         │
└─────────────────────────────────────────────────────────────┘

@typescript-eda/domain
    ↑
    ├─ @typescript-eda/infrastructure
    ├─ @typescript-eda/application
    ↑
    ├─ @web-buddy/nodejs-server
    ├─ @web-buddy/browser-extension
    ↑
    ├─ @chatgpt-buddy/server
    ├─ @chatgpt-buddy/extension  
    ├─ @chatgpt-buddy/client
    ├─ @github-buddy/* (future)
    └─ @gmail-buddy/* (future)
#+END_SRC

** Version Compatibility Matrix

| Package | TypeScript-EDA | Web-Buddy | ChatGPT-Buddy |
|---------|----------------|-----------|---------------|
| Domain | 1.0.0 | - | - |
| Infrastructure | 1.0.0 | - | - |
| Application | 1.0.0 | - | - |
| Web-Buddy Server | 1.0.0 | 1.0.0 | - |
| Web-Buddy Extension | 1.0.0 | 1.0.0 | - |
| ChatGPT Server | 1.0.0 | 1.0.0 | 2.0.0 |
| ChatGPT Extension | 1.0.0 | 1.0.0 | 2.0.0 |
| ChatGPT Client | 1.0.0 | - | 2.0.0 |

* Development Workflow

** Repository Development Order

1. **Foundation First**: Develop and stabilize TypeScript-EDA packages
2. **Framework Second**: Build Web-Buddy framework on stable foundation
3. **Implementation Third**: Create specialized implementations (ChatGPT-buddy, etc.)

** Cross-Repository Changes

When making changes that affect multiple repositories:

1. **Start with Domain**: Make changes to =@typescript-eda/domain= first
2. **Update Infrastructure**: Adapt =@typescript-eda/infrastructure= to domain changes
3. **Update Application**: Modify =@typescript-eda/application= for orchestration changes
4. **Update Frameworks**: Adapt Web-Buddy packages to foundation changes
5. **Update Implementations**: Finally update ChatGPT-buddy and other tools

** Testing Strategy

- **Unit Tests**: Each repository has comprehensive unit tests
- **Integration Tests**: Test cross-package integration scenarios
- **Contract Tests**: Ensure API contracts between packages remain stable
- **E2E Tests**: Full ecosystem testing in ChatGPT-buddy and implementations

* Usage Patterns

** For Framework Developers

Building new automation frameworks (GitHub-buddy, Gmail-buddy, etc.):

#+BEGIN_SRC typescript
// 1. Use Web-Buddy as foundation
import { BackgroundApplication } from '@web-buddy/browser-extension';
import { ServerApplication } from '@web-buddy/nodejs-server';

// 2. Extend with domain-specific functionality
@Enable(GitHubIntegrationAdapter)
export class GitHubBuddyApplication extends BackgroundApplication {
  // Domain-specific automation logic
}
#+END_SRC

** For Application Developers

Using existing tools like ChatGPT-buddy:

#+BEGIN_SRC typescript
import { createChatGPTBuddyClient } from '@chatgpt-buddy/client';

const client = await createChatGPTBuddyClient({
  serverUrl: 'http://localhost:3003',
  defaultModel: 'gpt-4'
});

const response = await client.chat({
  prompt: 'Explain TypeScript decorators',
  model: 'gpt-4'
});
#+END_SRC

** For Infrastructure Developers  

Creating new adapters and ports:

#+BEGIN_SRC typescript
import { AdapterFor, Port } from '@typescript-eda/infrastructure';

export abstract class NotificationPort extends Port {
  abstract sendNotification(message: string): Promise<void>;
}

@AdapterFor(NotificationPort)
export class EmailNotificationAdapter extends NotificationPort {
  async sendNotification(message: string): Promise<void> {
    // Email implementation
  }
}
#+END_SRC

* Migration Paths

** From Monorepo to Multi-Repo

Current users of the monorepo version can migrate gradually:

1. **Phase 1**: Update imports to use new package names
2. **Phase 2**: Install packages from NPM instead of local builds
3. **Phase 3**: Migrate custom code to use new APIs
4. **Phase 4**: Adopt new patterns (contract-based automation, plugins)

** Backward Compatibility

- **Event Names**: All existing event names remain compatible
- **API Surface**: Core APIs maintain backward compatibility
- **Configuration**: Existing configuration files continue to work
- **Extensions**: Existing browser extensions can be gradually updated

* Performance Characteristics

** Package Sizes

| Package | Bundle Size | Dependencies | Load Time |
|---------|-------------|--------------|-----------|
| @typescript-eda/domain | ~15KB | 0 | <10ms |
| @typescript-eda/infrastructure | ~25KB | 1 | <15ms |
| @typescript-eda/application | ~20KB | 2 | <12ms |
| @web-buddy/nodejs-server | ~150KB | 3 + extras | <100ms |
| @web-buddy/browser-extension | ~200KB | 3 + browser APIs | <200ms |
| @chatgpt-buddy/client | ~80KB | 3 + HTTP client | <50ms |

** Runtime Performance

- **Event Processing**: <1ms per event in typical scenarios
- **Memory Usage**: ~50MB for full ChatGPT-buddy installation
- **Network Overhead**: <10KB for typical automation requests
- **Storage Impact**: <5MB for learned patterns and configuration

* Documentation Structure

** Per-Repository Documentation

Each repository contains:

- **README.md**: Quick start and basic usage
- **docs/story.org**: Narrative explanation of purpose and design
- **docs/getting_started.org**: Step-by-step tutorial
- **docs/journal.org**: Development notes and decisions
- **docs/specs/**: Technical specifications and examples

** Cross-Repository Documentation

- **This Document**: Ecosystem overview and relationships
- **Migration Guides**: Moving between versions and architectures
- **Integration Examples**: How to combine multiple packages
- **Best Practices**: Recommended patterns and approaches

* Community and Ecosystem

** NPM Organizations

- **@typescript-eda**: Foundation packages for event-driven architecture
- **@web-buddy**: Web automation framework packages
- **@chatgpt-buddy**: AI automation implementation packages

** Future Ecosystem Expansion

Planned additional implementations:

- **@github-buddy**: Git workflow automation
- **@gmail-buddy**: Email management automation  
- **@docs-buddy**: Documentation workflow automation
- **@testing-buddy**: Automated testing workflow tools

** Plugin Architecture (Phase 17)

Future plugin system will enable:

- **Contract-Based Integration**: Web apps declare automation capabilities
- **Plugin Marketplace**: Community-driven automation extensions
- **Auto-Generated SDKs**: Type-safe clients from web app contracts
- **Zero-Fragility Automation**: No more broken selectors

* Getting Started

** For New Users

1. **Choose Your Use Case**:
   - AI automation: Start with =@chatgpt-buddy/*=
   - Custom web automation: Start with =@web-buddy/*=
   - Event-driven architecture: Start with =@typescript-eda/*=

2. **Install Dependencies**:
   #+BEGIN_SRC bash
   npm install @chatgpt-buddy/client  # For AI automation
   npm install @web-buddy/browser-extension  # For custom automation
   npm install @typescript-eda/domain  # For EDA patterns
   #+END_SRC

3. **Follow Getting Started Guides**:
   - [[./chatgpt-buddy/getting-started.org][ChatGPT-Buddy Getting Started]]
   - [[./web-buddy/getting-started.org][Web-Buddy Getting Started]]
   - [[./typescript-eda/getting-started.org][TypeScript-EDA Getting Started]]

** For Contributors

1. **Development Setup**:
   #+BEGIN_SRC bash
   git clone https://github.com/rydnr/chatgpt-buddy
   cd chatgpt-buddy
   npm run install:all
   npm run build
   npm test
   #+END_SRC

2. **Choose Contribution Area**:
   - **Foundation**: Improve TypeScript-EDA patterns
   - **Framework**: Enhance Web-Buddy capabilities
   - **Implementation**: Extend ChatGPT-buddy features
   - **Documentation**: Improve guides and examples

3. **Follow Development Workflow**:
   - Create feature branch
   - Implement changes with tests
   - Update documentation
   - Submit pull request

* Support and Resources

** Documentation Links

- **TypeScript-EDA**: [[./typescript-eda/][Foundation Documentation]]
- **Web-Buddy**: [[./web-buddy/][Framework Documentation]]  
- **ChatGPT-Buddy**: [[./chatgpt-buddy/][Implementation Documentation]]

** Community Resources

- **GitHub Discussions**: Questions and community support
- **Issue Tracking**: Bug reports and feature requests
- **Discord Server**: Real-time community chat
- **Stack Overflow**: =typescript-eda= and =web-buddy= tags

** Commercial Support

- **Enterprise Consulting**: Custom implementation services
- **Training Services**: Team training on EDA patterns
- **Priority Support**: SLA-backed support for production deployments
- **Custom Development**: Bespoke automation solutions

This ecosystem represents a new paradigm in web automation, combining the robustness of event-driven architecture with the intelligence of AI-powered pattern learning. Whether you're building simple automation scripts or complex enterprise workflows, the TypeScript-EDA and Web-Buddy ecosystem provides the foundation for reliable, maintainable, and extensible solutions.